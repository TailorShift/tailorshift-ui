/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * TailorShift API 1.0
 * This is the TailorShift API providing endpoints for the Edge PoS devices running in the TailorShift shops.
 *
 * OpenAPI spec version: 1.0.1
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import * as isomorphicFetch from "isomorphic-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "/".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = isomorphicFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface AvailableProduct
 */
export interface AvailableProduct {
    /**
     * 
     * @type {string}
     * @memberof AvailableProduct
     */
    color: string;
    /**
     * 
     * @type {number}
     * @memberof AvailableProduct
     */
    quantity: number;
    /**
     * 
     * @type {number}
     * @memberof AvailableProduct
     */
    shopDiscount: number;
    /**
     * 
     * @type {number}
     * @memberof AvailableProduct
     */
    shopId: number;
    /**
     * 
     * @type {string}
     * @memberof AvailableProduct
     */
    size: string;
}
/**
 * 
 * @export
 * @interface Customer
 */
export interface Customer {
    /**
     * 
     * @type {number}
     * @memberof Customer
     */
    customerId: number;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof Customer
     */
    discount: number;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    street1: string;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    street2?: string;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    postcode: string;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    city: string;
}
/**
 * 
 * @export
 * @interface EmployeeTag
 */
export interface EmployeeTag {
    /**
     * 
     * @type {number}
     * @memberof EmployeeTag
     */
    cardId: number;
}
/**
 * 
 * @export
 * @interface ExistingReceipt
 */
export interface ExistingReceipt {
    /**
     * 
     * @type {string}
     * @memberof ExistingReceipt
     */
    receiptId: string;
    /**
     * 
     * @type {string}
     * @memberof ExistingReceipt
     */
    shopId: string;
    /**
     * 
     * @type {string}
     * @memberof ExistingReceipt
     */
    createdDate: string;
    /**
     * 
     * @type {number}
     * @memberof ExistingReceipt
     */
    totalTax: number;
    /**
     * 
     * @type {number}
     * @memberof ExistingReceipt
     */
    totalSum: number;
    /**
     * 
     * @type {Array<ReceiptPosition>}
     * @memberof ExistingReceipt
     */
    positions: Array<ReceiptPosition>;
}
/**
 * 
 * @export
 */
export type ExistingReceipts = Array<ExistingReceipt>
/**
 * 
 * @export
 * @interface NewReceipt
 */
export interface NewReceipt {
    /**
     * 
     * @type {number}
     * @memberof NewReceipt
     */
    customerId?: number;
    /**
     * 
     * @type {number}
     * @memberof NewReceipt
     */
    employeeId: number;
    /**
     * 
     * @type {number}
     * @memberof NewReceipt
     */
    deliveryShopId?: number;
    /**
     * 
     * @type {number}
     * @memberof NewReceipt
     */
    discountTotal: number;
    /**
     * 
     * @type {number}
     * @memberof NewReceipt
     */
    amountTotal: number;
    /**
     * 
     * @type {number}
     * @memberof NewReceipt
     */
    taxTotal: number;
    /**
     * 
     * @type {Array<ReceiptPosition>}
     * @memberof NewReceipt
     */
    positions: Array<ReceiptPosition>;
}
/**
 * 
 * @export
 * @interface Product
 */
export interface Product {
    /**
     * 
     * @type {Array<AvailableProduct>}
     * @memberof Product
     */
    available: Array<AvailableProduct>;
    /**
     * Product code
     * @type {string}
     * @memberof Product
     */
    code: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Product
     */
    colors: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    manufacturer: string;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    price: number;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    taxRate: number;
}
/**
 * 
 * @export
 * @interface ReceiptPosition
 */
export interface ReceiptPosition {
    /**
     * 
     * @type {string}
     * @memberof ReceiptPosition
     */
    productId: string;
    /**
     * 
     * @type {number}
     * @memberof ReceiptPosition
     */
    position: number;
    /**
     * 
     * @type {string}
     * @memberof ReceiptPosition
     */
    size: string;
    /**
     * 
     * @type {string}
     * @memberof ReceiptPosition
     */
    color: string;
    /**
     * 
     * @type {number}
     * @memberof ReceiptPosition
     */
    quantity: number;
    /**
     * 
     * @type {number}
     * @memberof ReceiptPosition
     */
    returnedQuantity: number;
    /**
     * 
     * @type {number}
     * @memberof ReceiptPosition
     */
    price: number;
    /**
     * Discount on this item (%)
     * @type {number}
     * @memberof ReceiptPosition
     */
    discount: number;
    /**
     * Tax rate on this item (%)
     * @type {number}
     * @memberof ReceiptPosition
     */
    taxRate: number;
}
/**
 * 
 * @export
 * @interface ReturnOrder
 */
export interface ReturnOrder {
    /**
     * 
     * @type {string}
     * @memberof ReturnOrder
     */
    employeeId: string;
    /**
     * 
     * @type {Array<ReturnPosition>}
     * @memberof ReturnOrder
     */
    positions: Array<ReturnPosition>;
}
/**
 * 
 * @export
 * @interface ReturnPosition
 */
export interface ReturnPosition {
    /**
     * 
     * @type {string}
     * @memberof ReturnPosition
     */
    receiptPositionId: string;
    /**
     * 
     * @type {number}
     * @memberof ReturnPosition
     */
    quantity: number;
}
/**
 * PosApi - fetch parameter creator
 * @export
 */
export const PosApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Authorize an existing employee by his/her badge/tag/...
         * @param {number} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authorizeEmployee(cardId: number, options: any = {}): FetchArgs {
            // verify required parameter 'cardId' is not null or undefined
            if (cardId === null || cardId === undefined) {
                throw new RequiredError('cardId', 'Required parameter cardId was null or undefined when calling authorizeEmployee.');
            }
            const localVarPath = `/pos/authorize-employee`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            if (cardId !== undefined) {
                localVarFormParams.set('card-id', cardId as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new receipt
         * @param {NewReceipt} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReceipt(body: NewReceipt, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling createReceipt.');
            }
            const localVarPath = `/pos/receipts`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"NewReceipt" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new return order for the specified receipt
         * @param {ReturnOrder} body 
         * @param {string} receiptId The receipt ID the return order is created for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReceiptReturnOrder(body: ReturnOrder, receiptId: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling createReceiptReturnOrder.');
            }
            // verify required parameter 'receiptId' is not null or undefined
            if (receiptId === null || receiptId === undefined) {
                throw new RequiredError('receiptId', 'Required parameter receiptId was null or undefined when calling createReceiptReturnOrder.');
            }
            const localVarPath = `/pos/receipts/{receiptId}/return`
                .replace(`{${"receiptId"}}`, encodeURIComponent(String(receiptId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ReturnOrder" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get customer information for a specific customer
         * @param {string} customerId Retrieve the information for customer with customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomer(customerId: string, options: any = {}): FetchArgs {
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new RequiredError('customerId', 'Required parameter customerId was null or undefined when calling getCustomer.');
            }
            const localVarPath = `/pos/customers/{customerId}`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get receipts for a specific customer
         * @param {string} customerId Retrieve the information for customer with customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerReceipts(customerId: string, options: any = {}): FetchArgs {
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new RequiredError('customerId', 'Required parameter customerId was null or undefined when calling getCustomerReceipts.');
            }
            const localVarPath = `/pos/customers/{customerId}/receipts`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get product information for a specific product
         * @param {string} productId Retrieve the information for product with productId
         * @param {boolean} [allShops] Whether search is performed on current shop only or in other shops too
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProduct(productId: string, allShops?: boolean, options: any = {}): FetchArgs {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError('productId', 'Required parameter productId was null or undefined when calling getProduct.');
            }
            const localVarPath = `/pos/products/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (allShops !== undefined) {
                localVarQueryParameter['allShops'] = allShops;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PosApi - functional programming interface
 * @export
 */
export const PosApiFp = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Authorize an existing employee by his/her badge/tag/...
         * @param {number} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authorizeEmployee(cardId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = PosApiFetchParamCreator(configuration).authorizeEmployee(cardId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Create a new receipt
         * @param {NewReceipt} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReceipt(body: NewReceipt, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = PosApiFetchParamCreator(configuration).createReceipt(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Create a new return order for the specified receipt
         * @param {ReturnOrder} body 
         * @param {string} receiptId The receipt ID the return order is created for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReceiptReturnOrder(body: ReturnOrder, receiptId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = PosApiFetchParamCreator(configuration).createReceiptReturnOrder(body, receiptId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get customer information for a specific customer
         * @param {string} customerId Retrieve the information for customer with customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomer(customerId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Customer> {
            const localVarFetchArgs = PosApiFetchParamCreator(configuration).getCustomer(customerId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get receipts for a specific customer
         * @param {string} customerId Retrieve the information for customer with customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerReceipts(customerId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ExistingReceipts> {
            const localVarFetchArgs = PosApiFetchParamCreator(configuration).getCustomerReceipts(customerId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get product information for a specific product
         * @param {string} productId Retrieve the information for product with productId
         * @param {boolean} [allShops] Whether search is performed on current shop only or in other shops too
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProduct(productId: string, allShops?: boolean, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Product> {
            const localVarFetchArgs = PosApiFetchParamCreator(configuration).getProduct(productId, allShops, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * PosApi - factory interface
 * @export
 */
export const PosApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Authorize an existing employee by his/her badge/tag/...
         * @param {number} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authorizeEmployee(cardId: number, options?: any) {
            return PosApiFp(configuration).authorizeEmployee(cardId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Create a new receipt
         * @param {NewReceipt} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReceipt(body: NewReceipt, options?: any) {
            return PosApiFp(configuration).createReceipt(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Create a new return order for the specified receipt
         * @param {ReturnOrder} body 
         * @param {string} receiptId The receipt ID the return order is created for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReceiptReturnOrder(body: ReturnOrder, receiptId: string, options?: any) {
            return PosApiFp(configuration).createReceiptReturnOrder(body, receiptId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get customer information for a specific customer
         * @param {string} customerId Retrieve the information for customer with customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomer(customerId: string, options?: any) {
            return PosApiFp(configuration).getCustomer(customerId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get receipts for a specific customer
         * @param {string} customerId Retrieve the information for customer with customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerReceipts(customerId: string, options?: any) {
            return PosApiFp(configuration).getCustomerReceipts(customerId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get product information for a specific product
         * @param {string} productId Retrieve the information for product with productId
         * @param {boolean} [allShops] Whether search is performed on current shop only or in other shops too
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProduct(productId: string, allShops?: boolean, options?: any) {
            return PosApiFp(configuration).getProduct(productId, allShops, options)(fetch, basePath);
        },
    };
};

/**
 * PosApi - object-oriented interface
 * @export
 * @class PosApi
 * @extends {BaseAPI}
 */
export class PosApi extends BaseAPI {
    /**
     * 
     * @summary Authorize an existing employee by his/her badge/tag/...
     * @param {number} cardId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PosApi
     */
    public authorizeEmployee(cardId: number, options?: any) {
        return PosApiFp(this.configuration).authorizeEmployee(cardId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Create a new receipt
     * @param {NewReceipt} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PosApi
     */
    public createReceipt(body: NewReceipt, options?: any) {
        return PosApiFp(this.configuration).createReceipt(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Create a new return order for the specified receipt
     * @param {ReturnOrder} body 
     * @param {string} receiptId The receipt ID the return order is created for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PosApi
     */
    public createReceiptReturnOrder(body: ReturnOrder, receiptId: string, options?: any) {
        return PosApiFp(this.configuration).createReceiptReturnOrder(body, receiptId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get customer information for a specific customer
     * @param {string} customerId Retrieve the information for customer with customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PosApi
     */
    public getCustomer(customerId: string, options?: any) {
        return PosApiFp(this.configuration).getCustomer(customerId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get receipts for a specific customer
     * @param {string} customerId Retrieve the information for customer with customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PosApi
     */
    public getCustomerReceipts(customerId: string, options?: any) {
        return PosApiFp(this.configuration).getCustomerReceipts(customerId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get product information for a specific product
     * @param {string} productId Retrieve the information for product with productId
     * @param {boolean} [allShops] Whether search is performed on current shop only or in other shops too
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PosApi
     */
    public getProduct(productId: string, allShops?: boolean, options?: any) {
        return PosApiFp(this.configuration).getProduct(productId, allShops, options)(this.fetch, this.basePath);
    }

}
